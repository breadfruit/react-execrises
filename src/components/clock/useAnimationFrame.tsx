import {useEffect, useRef} from "react";function useAnimationFrame(callback: (del: number | undefined) => void, delay = 0) {        const requestRef = useRef(0);        const previousTimeRef = useRef(0);        const animateRef = useRef((time: any) =>{});        const animate = (time) => {            console.log('time', time)            if ( time - previousTimeRef.current >= delay) {                callback(time - previousTimeRef.current);                previousTimeRef.current = time;            }            requestRef.current = requestAnimationFrame(animateRef.current);        }        useEffect(() => {            animateRef.current = animate        })       useEffect(() => {           requestRef.current = requestAnimationFrame(animateRef.current);           return () => cancelAnimationFrame(requestRef.current);       }, []);}export default useAnimationFrame;