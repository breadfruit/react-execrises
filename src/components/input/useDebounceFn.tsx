import debounce from 'lodash/debounce';import useLatest from './useLatest';import {useMemo} from 'react'import  useUnmount from './useUnmount'import type { DebounceOptions } from './DebounceOptions'import useDebounce from "./useDebounce";type noop = (...args: any[]) => any;function useDebounceFn<T extends noop>(fn: T, options?: DebounceOptions) {    const fnRef = useLatest(fn);    const wait = options?.wait ?? 1000;    const debounced = useMemo(        () =>            debounce<T>(                ((...args: any[]) => {                    return fnRef.current(...args);                }) as T,                wait,                options,            ),        [],    );    useUnmount(() => {        debounced.cancel();    });    return {        run: debounced as unknown as T,        cancel: debounced.cancel,        flush: debounced.flush,    };};export default useDebounceFn;