import React, {    useRef,    useState,    forwardRef,    useImperativeHandle,    useEffect,} from 'react';import type { InputProps, InputRef } from './interface';import BaseInput from './BaseInput';import omit from '../utils/omit'const Input = forwardRef<InputRef, InputProps>((props, ref) => {    const {        onChange,        onFocus,        onBlur,        disabled    } = props;    const [value, setValue] = useState(props.defaultValue);    const [focused, setFocused] = useState<boolean>(false);    const inputRef = useRef<HTMLInputElement>(null);    useImperativeHandle(ref, () => ({        focus: () => {            inputRef.current?.focus();        },        blur: () => {            inputRef.current?.blur();        }    }));    useEffect(() => {        setFocused((prev) => (prev && disabled ? false : prev));    }, [disabled]);    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {        setValue(e.target.value);        // if (inputRef.current) {        //     resolveOnChange(inputRef.current, e, onChange);        // }    };    const handleFocus: React.FocusEventHandler<HTMLInputElement> = (e) => {        setFocused(true);        onFocus?.(e);    };    const handleBlur: React.FocusEventHandler<HTMLInputElement> = (e) => {        setFocused(false);        onBlur?.(e);    };    const getInputElement = () => {        return (            <input                onChange={handleChange}                onFocus={handleFocus}                onBlur={handleBlur}                ref={inputRef}            />        );    };    return (        <BaseInput            inputElement={getInputElement()}            focused={focused}            disabled={disabled}        />    );});export default Input;