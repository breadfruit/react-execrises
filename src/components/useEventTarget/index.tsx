import {useCallback, useState} from "react";import useLatest from  '../utils/useLatest';interface EventTarget<U> {    target: {        value: U;    }}export interface Options<T, U> {    initialValue?: T;    transformer?: (value: U) => T;}function useEventTarget<T, U = T>(options?: Options<T, U>) {    const {initialValue, transformer} = options || {};    const [value, setValue] = useState(initialValue);    const transformerRef = useLatest(transformer);    const reset = useCallback(() => {        setValue(initialValue)    }, []);    const onChange = useCallback((e: EventTarget<U>) => {        const _value = e.target.value;        if (typeof transformerRef.current === 'function') {            return setValue(transformerRef.current(_value));        }        return setValue(_value as unknown as T)    }, []);    return [        value,        {            reset,            onChange        }    ] as const};export default useEventTarget;