import {useEffect, useRef} from "react";interface callbackRefProps {    <T>(value1:T):T;}const useInterval = function (callback, delay) {    const callbackRef = useRef(null);    useEffect(() => {        callbackRef.current = callback;    }, []);    useEffect(() => {        function tick () {            // @ts-ignore            callbackRef?.current();        };        if (delay != null) {            let timer = setInterval(tick, delay);            return () => clearInterval(timer)        }    })};export default useInterval;