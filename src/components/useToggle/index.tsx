import {useState, useMemo} from "react";type IState = string | number | boolean | undefined;//操作集合export interface Action<T = IState> {    setLeft: () => void,    setRight: () => void,    toggle: (value?: T) => void}function useToggle<T = boolean | undefined>() : [boolean, Action<T>]function useToggle<T = IState>(    defaultValue: T,):[T, Action<T>];//设置做左右值进行切换function useToggle<T = IState, U = IState>(    defaultValue: T,    reverseValue: U) : [T | U, Action<T | U >]//设置reverseValueOriginfunction useToggle<D, R>(defaultValue: D = false as unknown as D, reverseValue?: R){    const [state, setState] = useState<D | R>(defaultValue);    const actions = useMemo(() => {        const reverseValueOrigin = (reverseValue === undefined ? !defaultValue : reverseValue) as D | R;        const toggle = () => setState((s) => (s === defaultValue ? reverseValueOrigin : defaultValue));        const set = (value: D | R) => {setState(value)}        const setRight = () => setState(reverseValueOrigin);        const setLeft = () => setState(defaultValue);        return {            toggle,            set,            setRight,        }    }, []);    return [state, actions];}export default useToggle;